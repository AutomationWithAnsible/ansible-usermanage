---
# We are sending comples args
- name: single | Compile effective users
  usersdb:
      usersdb:
        "{{ usermanage_usersdb }}"
      teamsdb:
        "{{ usermanage_teamsdb }}"
      serversdb:
        "{{ usermanage_servers }}"

  connection: local
  register: cuser
  sudo: no
  tags: libs

- name: debug flat users
  debug:
    var=cuser.compiled_list
  sudo: no
  tags: libs

- name: single | Debug directory create
  file:
    path={{ usermanage_debug_dir }}
    state="directory"
    mode=0700
    owner=root
  when: usermanage_debug is defined and usermanage_debug

- name: single | Debug Users /tmp/debugUser.{{inventory_hostname}}-{{item.account}}
  template:
     src=debug_users.j2
     dest="{{ usermanage_debug_dir }}/{{ inventory_hostname }}-{{ item.name }}"
  with_items: usermanage_servers
  when: usermanage_debug is defined and usermanage_debug

- name: single | Create per user group
  group:
    name="{{ item.name }}"
    state="{{ item.state | default("present") }}"
  with_items: usermanage_servers
  when: usermanage_create_per_user_group

- name: single | Create groups
  group:
    name="{{ item.name }}"
    state="{{ item.state | default("present") }}"
    gid="{{ item.gid | default(omit) }}"
    system="{{ item.system | default('no') }}"
  with_items: usermanage_groups
  when: usermanage_groups is defined

- name: single | Create users
  user:
    name="{{ item.name }}"
    state="{{ item.state | default("present") }}"
    uid="{{ item.uid | default(omit) }}"
    group="{{ item.name if usermanage_create_per_user_group else usermanage_create_per_user_group if usermanage_create_per_user_group else undefined |  default(omit) }}"
    comment="{{ item.comment | default(omit) }}"
    groups="{{ item.groups | default(omit) }}"
    shell="{{ item.shell | default(usermanage_default_shell) }}"
    home="{{ item.home | default(usermanage_default_home_dir_prefix + "/" + item.name) }}"
    createhome="{{ item.createhome | default(true) }}"
    expires="{{ item.expires | default(omit) }}"
    remove="{{ item.remove | default(omit) }}"
    force=yes
    append=True
  with_items: usermanage_servers

#- name: single | Mange authorized_keys for multi access to same user
#  authorized_key:
#     user="{{ item.0.name }}"
#     state={{ 'absent' if 'delete' in usermanage_users[item.0.name] else item.1.state | default('present') }}
#     key="{{ usermanage_users[item.1.user].pubkey | default(omit) }}"
#     manage_dir="yes"
#     key_options="{{ item.1.key_options | default(omit) }}"
#  with_subelements:
#      - usermanage_servers
#      - userkeys
#  register: keyrc
#  failed_when: "'failed' in keyrc and 'getpwnam' not in keyrc.msg"
#


- name: single | Mange authorized_keys for multi access to same user
  authorized_key:
     user="{{ item.0.name }}"
     state={{ lookup("template","../templates/get_user_state.j2") }}
     key="{{ lookup("template","../templates/get_user_key.j2") }}"
     manage_dir="yes"
     key_options="{{ item.1.key_options | default(omit) }}"
  with_subelements:
      - usermanage_servers
      - userkeys
  register: keyrc
  failed_when: "'failed' in keyrc and 'getpwnam' not in keyrc.msg"


